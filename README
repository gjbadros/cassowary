Cassowary Constraint Solver for Smalltalk, C++, and Java
Version 0.2

Web Page: http://www.cs.washington.edu/research/constraints/cassowary
Contact: cassowary@cs.washington.edu

Greg J. Badros <gjb@cs.washington.edu> and
Alan Borning <borning@cs.washington.edu>
University of Washington
Computer Science and Engineering
Seattle, WA 98195-2350
06-August-1998

with Constraint Drawing Applet (CDA) by Michael Noth <noth@cs.washington.edu>

See ANNOUNCE for a brief description and announcement of this distribution.
See NEWS for a history of user-visible changes.
See COPYRIGHT for legalese regarding use of this distribution.

Please send bug reports to cassowary@cs.washington.edu
Also, send mail to cassowary@cs.washington.edu if you would like to be
informed about bug fixes, feature enhancements, etc.  Let us know what
implementation(s) you are using, too.

------------------------------------------------------------------

WHAT THE DISTRIBUTION CONTAINS

This distribution contains 3 implementations of the Cassowary constraint
solver:

o C++
o Java
o Smalltalk (v0.1)

For each implementation language, there is at least one example program; 
for some there are many.

There is a wrapping of the C++ solver in Guile-Scheme -- see the guile/
subdirectory.

There is also a SWIG-generated wrapper of the C++ library making the
solver available from the Python language.

A technical report describing the solver, its interface, and its
implementation is in cassowary-tr.ps (pdf version in cassowary-tr.pdf).
This paper is required reading if you intend to use the solver in your
own project(s).

See also the SCWM (Scheme Constraints Window Manager) web page:

http://web.mit.edu/mstachow/www/scwm.html

SCWM, also by Greg Badros, is the most substantial application using
this toolkit that we are aware of.

------------------------------------------------------------------

HOW TO GET STARTED

First, you should try to build the implementation that you're most
interested in.

Note that the included Makefiles depend upon features of GNU Make.  See:

ftp://ftp.gnu.org/pub/gnu/

for a version of make that you can build first to then build Cassowary.

Example applications exist in subdirectories of the top-level
implementation subdirectories (e.g., c++/qdemos contains demos for C++
that use the Qt Widget toolkit.

Please send mail to cassowary@cs.washington.edu if you are using this
toolkit so we know how to reach you for bug fixes, updates, etc.

------------------------------------------------------------------

VARIOUS IMPLEMENTATION NOTES

Cassowary/C++ needs to be compiled using a modern C++ compiler.
At one time or another, it has compiled using:
  o egcs-1.0.1
  o egcs-1.0.3a
  o gcc-2.8.1 (needs libstdc++-2.8.x, too)
  o Visual C++ 5.0

In particular, Cassowary will *not* build with gcc-2.7.x.x!

See c++/README for more details about building the C++ version.


Cassowary/Java was developed using Sun's JDK-1.1.3, ported to Linux
More recent versions should work fine.

See java/README for more details about building the Java version.


Cassowary/Smalltalk was written under OTI Smalltalk-- other versions of
smalltalk will likely require (possibly significant) changes.

See smalltalk/README for more details about the Smalltalk version.

See guile/README for details about the Guile Scheme wrapper of the C++
implementation, and for a pointer to SCWM, the Scheme Constraints Window 
Manager which uses Cassowary.

The Python bindings (by Tessa Lau) bindings for the Cassowary library
are in the wrappers/ subdirectory.  SWIG was used in wrapping the
library.  These bindings may no longer work, and are provided only for
your hacking pleasure (please send back useful patches if you do get the 
code working).

For more information about SWIG, see:

http://www.cs.utah.edu/~beazley/SWIG/swig.html


For more information about the Python language, see:

http://www.python.org/


For more information about the Guile-Scheme language, see:

http://www.fsf.org/software/guile/guile.html


------------------------------------------------------------------

DEMONSTRATION APPLICATION

A standard demonstration application is included for each implementation 
of the Cassowary solver.  The application builds a quadrilateral and
connects the neighboring midpoints of each of the outer edges to form an 
interior quadrilateral which is provably a parallelogram.  The
constraint solver manages the constraints to keep the outer
quadrilateral inside the window, keep the midpoints properly positioned, 
and keep the outer quadrilateral from turning "inside out."  

The user is able to select points (draggable boxes) and move them around 
within the window (both midpoints and endpoints can be selected, of
course).  The solver updates the figure, and redraws.


------------------------------------------------------------------

FUNDING ACKNOWLEDGEMENTS

This work has been funded in part by the National Science Foundation under
Grants IRI-9302249 and CCR-9402551, by Object Technology International, and
by a Fulbright Award from the Australian-American Educational
Foundation.

Additionally, Greg Badros is supported by a National Science Foundation
Graduate Research Fellowship.  Parts of this material are based upon
work supported under that fellowship.
