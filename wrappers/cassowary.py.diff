--- cassowary.py.orig	Tue Mar 16 15:01:07 1999
+++ cassowary.py	Tue Mar 16 15:04:20 1999
@@ -1,5 +1,8 @@
+# vim: set ts=4 sw=4 et:
 # This file was created automatically by SWIG.
 import cassowaryc
+from types import *
+
 class ClVariablePtr :
     def __init__(self,this):
         self.this = this
@@ -12,24 +15,50 @@
         return val
     def __repr__(self):
         return "<C ClVariable instance>"
+    def __add__(self, right):
+        return ClLinearExpression(self).Plus(right)
+    def __radd__(self, left):
+        return ClLinearExpression(left).Plus(self)
+    def __sub__(self, right):
+        return ClLinearExpression(self).Minus(right)
+    def __rsub__(self, left):
+        return ClLinearExpression(left).Minus(self)
+    def __mul__(self, right):
+        return ClLinearExpression(self).Times(right)
+    def __rmul__(self, left):
+        return ClLinearExpression(left).Times(self)
+    def __div__(self, right):
+        return ClLinearExpression(self).Divide(right)
+    def __rdiv__(self, left):
+        return ClLinearExpression(left).Divide(self)
 class ClVariable(ClVariablePtr):
-    def __init__(self,arg0) :
-        self.this = cassowaryc.new_ClVariable(arg0)
+    def __init__(self,*arg0) :
+        if len(arg0) == 0:
+            self.this = apply(cassowaryc.new_ClVariableNamed, arg0)
+        elif len(arg0) == 1:
+            if type(arg0[0]) in [FloatType, IntType]:
+                self.this = apply(cassowaryc.new_ClVariable, arg0)
+            elif type(arg0[0]) is StringType:
+                self.this = apply(cassowaryc.new_ClVariableNamed, arg0)
+            else:
+                raise TypeError, "ClVariable constructor"
+        elif len(arg0) == 2:
+            if type(arg0[0]) is StringType and type(arg0[1]) in \
+                [FloatType, IntType]:
+                self.this = apply(cassowaryc.new_ClVariableNamed, arg0)
+            elif type(arg0[0]) in [FloatType, IntType] and type(arg0[1]) \
+                is StringType:
+                self.this = apply(cassowaryc.new_ClVariablePrefix, arg0)
+            else:
+                raise TypeError, "ClVariable constructor"
+        elif len(arg0) == 3:
+            self.this = apply(cassowaryc.new_ClVariablePrefix, arg0)
+        else:
+            raise TypeError, "ClVariable constructor"
         self.thisown = 1
 
 
 
-def ClVariableNamed(*args) :
-    val = ClVariablePtr(apply(cassowaryc.new_ClVariableNamed,()+args))
-    val.thisown = 1
-    return val
-
-def ClVariablePrefix(arg0,arg1,*args) :
-    val = ClVariablePtr(apply(cassowaryc.new_ClVariablePrefix,(arg0,arg1,)+args))
-    val.thisown = 1
-    return val
-
-
 class ClPointPtr :
     def __init__(self,this):
         self.this = this
@@ -53,18 +82,17 @@
     def __repr__(self):
         return "<C ClPoint instance>"
 class ClPoint(ClPointPtr):
-    def __init__(self) :
-        self.this = cassowaryc.new_ClPoint()
+    def __init__(self, *args) :
+        if len(args) == 0:
+            self.this = cassowaryc.new_ClPoint()
+        elif len(args) == 2:
+            self.this = apply(cassowaryc.new_ClPointXY, args)
+        else:
+            raise TypeError, "ClPoint constructor"
         self.thisown = 1
 
 
 
-def ClPointXY(arg0,arg1) :
-    val = ClPointPtr(cassowaryc.new_ClPointXY(arg0,arg1))
-    val.thisown = 1
-    return val
-
-
 class ClStrengthPtr :
     def __init__(self,this):
         self.this = this
@@ -98,23 +126,37 @@
     def __repr__(self):
         return "<C ClLinearEquation instance>"
 class ClLinearEquation(ClLinearEquationPtr):
-    def __init__(self,arg0,arg1,*args) :
-        self.this = apply(cassowaryc.new_ClLinearEquation,(arg0.this,arg1.this,)+args)
+    def __init__(self,*args) :
+        if len(args) < 1 or len(args) > 4:
+            raise TypeError, 'ClLinearEquation constructor'
+        if type(args[-1]) in [FloatType, IntType]:
+            weight = args[-1]
+            strength = args[-2]
+            args = args[:-2]
+        else:
+            weight = 1.0
+            if type(args[-1]) is InstanceType and (args[-1].__class__ ==\
+                ClStrengthPtr or args[-1].__class__ == ClStrength):
+                strength = args[-1]
+                args = args[:-1]
+            else:
+                strength = ClsRequired()
+        if len(args) == 1:
+            self.this = apply(cassowaryc.new_ClLinearEquation, 
+                tuple(map(lambda x: x.this, args))+(strength.this, weight))
+        elif len(args) == 2:
+            if type(args[0]) is InstanceType and (args[0].__class__ ==\
+                ClVariable or args[0].__class__ == ClVariablePtr):
+                self.this = apply(cassowaryc.new_ClLinearEquation1,
+                    tuple(map(lambda x: x.this, args))+(strength.this, weight))
+            else:
+                self.this = apply(cassowaryc.new_ClLinearEquation2,
+                    tuple(map(lambda x: x.this, args))+(strength.this, weight))
+        else:
+            raise TypeError, 'ClLinearEquation constructor'
         self.thisown = 1
 
 
-
-def ClLinearEquation1(arg0,arg1,arg2,*args) :
-    val = ClLinearEquationPtr(apply(cassowaryc.new_ClLinearEquation1,(arg0.this,arg1.this,arg2.this,)+args))
-    val.thisown = 1
-    return val
-
-def ClLinearEquation2(arg0,arg1,arg2,*args) :
-    val = ClLinearEquationPtr(apply(cassowaryc.new_ClLinearEquation2,(arg0.this,arg1.this,arg2.this,)+args))
-    val.thisown = 1
-    return val
-
-
 class ClLinearInequalityPtr(ClConstraintPtr):
     def __init__(self,this):
         self.this = this
@@ -122,23 +164,47 @@
     def __repr__(self):
         return "<C ClLinearInequality instance>"
 class ClLinearInequality(ClLinearInequalityPtr):
-    def __init__(self,arg0,arg1,*args) :
-        self.this = apply(cassowaryc.new_ClLinearInequality,(arg0.this,arg1.this,)+args)
+    def __init__(self,*args) :
+        if len(args) < 1 or len(args) > 5:
+            raise TypeError, 'ClLinearInequality constructor'
+        if type(args[-1]) in [FloatType, IntType] and len(args) == 5:
+            weight = args[-1]
+            strength = args[-2]
+            args = args[:-2]
+        else:
+            weight = 1.0
+            if type(args[-1]) is InstanceType and (args[-1].__class__ ==\
+                ClStrengthPtr or args[-1].__class__ == ClStrength):
+                strength = args[-1]
+                args = args[:-1]
+            else:
+                strength = ClsRequired()
+        if len(args) == 1:
+            self.this = apply(cassowaryc.new_ClLinearInequality, 
+                tuple(map(lambda x: x.this, args))+(strength.this, weight))
+        elif len(args) == 3:
+            # Set up 3rd arg
+            if type(args[2]) is InstanceType and (args[2].__class__ ==\
+                ClLinearExpression or \
+                args[2].__class__ == ClLinearExpressionPtr):
+                thirdarg = args[2]
+            else:
+                thirdarg = ClLinearExpression(args[2])
+            # Make the right call
+            if type(args[0]) is InstanceType and (args[0].__class__ ==\
+                ClVariable or args[0].__class__ == ClVariablePtr):
+                self.this = apply(cassowaryc.new_ClLinearInequality1,
+                    (args[0].this, args[1], thirdarg.this) +
+                    (strength.this, weight))
+            else:
+                self.this = apply(cassowaryc.new_ClLinearInequality2,
+                    (args[0].this, args[1], thirdarg.this) +
+                    (strength.this, weight))
+        else:
+            raise TypeError, 'ClLinearInequality constructor'
         self.thisown = 1
 
 
-
-def ClLinearInequality1(arg0,arg1,arg2,arg3,*args) :
-    val = ClLinearInequalityPtr(apply(cassowaryc.new_ClLinearInequality1,(arg0.this,arg1,arg2.this,arg3.this,)+args))
-    val.thisown = 1
-    return val
-
-def ClLinearInequality2(arg0,arg1,arg2,arg3,*args) :
-    val = ClLinearInequalityPtr(apply(cassowaryc.new_ClLinearInequality2,(arg0.this,arg1,arg2.this,arg3.this,)+args))
-    val.thisown = 1
-    return val
-
-
 class ClLinearExpressionPtr :
     def __init__(self,this):
         self.this = this
@@ -147,44 +213,106 @@
         if self.thisown == 1 :
             cassowaryc.delete_ClLinearExpression(self.this)
     def Times(self,arg0):
-        val = cassowaryc.ClLinearExpression_Times(self.this,arg0)
-        val = ClLinearExpressionPtr(val)
-        val.thisown = 1
-        return val
-    def TimesE(self,arg0):
-        val = cassowaryc.ClLinearExpression_TimesE(self.this,arg0.this)
+        if type(arg0) in [FloatType, IntType]:
+            val = cassowaryc.ClLinearExpression_Times(self.this,arg0)
+        elif type(arg0) is InstanceType and (arg0.__class__ ==
+            ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
+            val = cassowaryc.ClLinearExpression_TimesE(self.this, arg0.this)
+        else: # type(arg0) is a ClVariable
+            expr = ClLinearExpression(arg0)
+            val = cassowaryc.ClLinearExpression_TimesE(self.this,
+                                                       expr.this)
         val = ClLinearExpressionPtr(val)
         val.thisown = 1
         return val
+    def __mul__(self, arg0):
+        return self.Times(arg0)
+    def __rmul__(self, arg0):
+        return self.Times(arg0)
     def Plus(self,arg0):
-        val = cassowaryc.ClLinearExpression_Plus(self.this,arg0.this)
+        if type(arg0) is InstanceType and (arg0.__class__ ==
+            ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
+            val = cassowaryc.ClLinearExpression_Plus(self.this, arg0.this)
+        else:
+            expr = ClLinearExpression(arg0)
+            val = cassowaryc.ClLinearExpression_Plus(self.this,
+                                                     expr.this)
         val = ClLinearExpressionPtr(val)
         val.thisown = 1
         return val
+    def __add__(self, arg0):
+        return self.Plus(arg0)
+    def __radd__(self, arg0):
+        return self.Plus(arg0)
     def Minus(self,arg0):
-        val = cassowaryc.ClLinearExpression_Minus(self.this,arg0.this)
+        if type(arg0) is InstanceType and (arg0.__class__ ==
+            ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
+            val = cassowaryc.ClLinearExpression_Minus(self.this, arg0.this)
+        else:
+            expr = ClLinearExpression(arg0)
+            val = cassowaryc.ClLinearExpression_Minus(self.this,
+                                                      expr.this)
         val = ClLinearExpressionPtr(val)
         val.thisown = 1
         return val
+    def __sub__(self, arg0):
+        return self.Minus(arg0)
+    def __rsub__(self, left):
+        return ClLinearExpression(left).Minus(arg0)
     def Divide(self,arg0):
-        val = cassowaryc.ClLinearExpression_Divide(self.this,arg0)
-        val = ClLinearExpressionPtr(val)
-        val.thisown = 1
-        return val
-    def DivideE(self,arg0):
-        val = cassowaryc.ClLinearExpression_DivideE(self.this,arg0.this)
+        if type(arg0) is InstanceType and (arg0.__class__ ==
+            ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
+            val = cassowaryc.ClLinearExpression_DivideE(self.this, arg0.this)
+        elif type(arg0) in [FloatType, IntType]:
+            val = cassowaryc.ClLinearExpression_Divide(self.this, arg0)
+        else: # type(arg0) is ClVariable
+            expr = ClLinearExpression(arg0)
+            val = cassowaryc.ClLinearExpression_DivideE(self.this,
+                                                        expr.this)
         val = ClLinearExpressionPtr(val)
         val.thisown = 1
         return val
+    def __div__(self, arg0):
+        return self.Divide(arg0)
+    def __rdiv__(self, left):
+        return ClLinearExpression(left).Divide(self)
     def DivFrom(self,arg0):
-        val = cassowaryc.ClLinearExpression_DivFrom(self.this,arg0.this)
+        if type(arg0) is InstanceType and (arg0.__class__ ==
+            ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
+            val = cassowaryc.ClLinearExpression_divFrom(self.this, arg0.this)
+        else:
+            expr = ClLinearExpression(arg0)
+            val = cassowaryc.ClLinearExpression_divFrom(self.this,
+                                                        expr.this)
         val = ClLinearExpressionPtr(val)
         val.thisown = 1
         return val
     def SubtractFrom(self,arg0):
-        val = cassowaryc.ClLinearExpression_SubtractFrom(self.this,arg0.this)
+        if type(arg0) is InstanceType and (arg0.__class__ ==
+            ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
+            val = cassowaryc.ClLinearExpression_subtractFrom(self.this,
+            arg0.this)
+        else:
+            expr = ClLinearExpression(arg0)
+            val = cassowaryc.ClLinearExpression_subtractFrom(self.this,
+                expr.this)
+        val = ClLinearExpressionPtr(val)
+        return val
+    def AddExpression(self,*args):
+        if len(args) == 4:
+            val = apply(cassowaryc.ClLinearExpression_addExpression1,
+                (self.this, args[0].this, args[1], args[2].this, args[3].this))
+        else:
+            val = apply(cassowaryc.ClLinearExpression_addExpression,
+                (self.this, args[0].this,) + tuple(args[1:]))
+        val = ClLinearExpressionPtr(val)
+        return val
+    def AddVariable(self,*args):
+        if len(args) == 4:
+            val = cassowaryc.ClLinearExpression_addVariable1(self.this,arg0.this,arg1,arg2.this,arg3.this)
+        else: # len(args) == 2
+            val = cassowaryc.ClLinearExpression_addVariable(self.this,arg0.this,arg1)
         val = ClLinearExpressionPtr(val)
-        val.thisown = 1
         return val
     def AddExpression(self,arg0,*args):
         val = apply(cassowaryc.ClLinearExpression_AddExpression,(self.this,arg0.this,)+args)
@@ -214,18 +342,21 @@
     def __repr__(self):
         return "<C ClLinearExpression instance>"
 class ClLinearExpression(ClLinearExpressionPtr):
-    def __init__(self,arg0,*args) :
-        self.this = apply(cassowaryc.new_ClLinearExpression,(arg0.this,)+args)
+    def __init__(self,*args) :
+        if len(args) < 1 or len(args) > 3:
+            raise TypeError, 'ClLinearExpression constructor'
+        if type(args[0]) is InstanceType and (args[0].__class__ ==\
+            ClVariable or args[0].__class__ == ClVariablePtr):
+            self.this = apply(cassowaryc.new_ClLinearExpression,
+                (args[0].this,) + tuple(args[1:]))
+        elif type(args[0]) in [FloatType, IntType]:
+            self.this = apply(cassowaryc.new_ClLinearExpressionNum, args)
+        else:
+            raise TypeError, 'ClLinearExpression constructor'
         self.thisown = 1
 
 
 
-def ClLinearExpressionNum(*args) :
-    val = ClLinearExpressionPtr(apply(cassowaryc.new_ClLinearExpressionNum,()+args))
-    val.thisown = 1
-    return val
-
-
 class ClSimplexSolverPtr :
     def __init__(self,this):
         self.this = this
@@ -253,16 +384,27 @@
         val = cassowaryc.ClSimplexSolver_AddPointStays(self.this,arg0)
         val = ClSimplexSolverPtr(val)
         return val
-    def AddPointStay(self,arg0,arg1):
-        val = cassowaryc.ClSimplexSolver_AddPointStay(self.this,arg0.this,arg1)
-        val = ClSimplexSolverPtr(val)
-        return val
-    def addPointStayXY(self,arg0,arg1,arg2):
-        val = cassowaryc.ClSimplexSolver_addPointStayXY(self.this,arg0.this,arg1.this,arg2)
+    def AddPointStay(self,*args):
+        if len(args) == 3:
+            val = cassowaryc.ClSimplexSolver_AddPointStayXY(self.this,
+                 args[0].this,args[1].this,args[2])
+        else: # len(args) == 2
+            val = cassowaryc.ClSimplexSolver_AddPointStay(self.this,
+               args[0].this,args[1])
         val = ClSimplexSolverPtr(val)
         return val
-    def AddStay(self,arg0,arg1,*args):
-        val = apply(cassowaryc.ClSimplexSolver_AddStay,(self.this,arg0.this,arg1.this,)+args)
+    def AddStay(self,arg0,*args):
+        if len(args) == 2:
+            weight = args[1]
+            strength = args[0]
+        elif len(args) == 1:
+            weight = 1.0
+            strength = args[0]
+        else:
+            weight = 1.0
+            strength = ClsWeak()
+        val = apply(cassowaryc.ClSimplexSolver_AddStay,(self.this,arg0.this,
+                                                        strength.this, weight))
         val = ClSimplexSolverPtr(val)
         return val
     def RemoveConstraint(self,arg0):
@@ -272,12 +414,13 @@
     def Reset(self):
         val = cassowaryc.ClSimplexSolver_Reset(self.this)
         return val
-    def Resolve(self,arg0):
-        val = cassowaryc.ClSimplexSolver_Resolve(self.this,arg0)
-        return val
-    def resolveXY(self,arg0,arg1):
-        val = cassowaryc.ClSimplexSolver_resolveXY(self.this,arg0,arg1)
-        return val
+    def Resolve(self,*args):
+        if len(args) == 1:
+            val = apply(cassowaryc.ClSimplexSolver_resolve, (self.this,) +
+                        args)
+        else: # len(args) == 2
+            val = apply(cassowaryc.ClSimplexSolver_resolveXY, (self.this,) +
+                        args)
     def __repr__(self):
         return "<C ClSimplexSolver instance>"
 class ClSimplexSolver(ClSimplexSolverPtr):
@@ -295,8 +438,14 @@
     def __repr__(self):
         return "<C ClEditConstraint instance>"
 class ClEditConstraint(ClEditConstraintPtr):
-    def __init__(self,arg0,arg1,*args) :
-        self.this = apply(cassowaryc.new_ClEditConstraint,(arg0.this,arg1.this,)+args)
+    def __init__(self,arg0,*args) :
+        if not args:
+            strength = ClsStrong()
+        else:
+            strength = args[0]
+            args = args[1:]
+        self.this = apply(cassowaryc.new_ClEditConstraint,(arg0.this,
+            strength.this,)+args)
         self.thisown = 1
 
 
