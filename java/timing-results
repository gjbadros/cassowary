Kazmig w/o kaffe 2/13/98:

addDel:
starting timing test. nCns = 900, nVars = 900, nResolves = 10000
done building data structures
time = 21.798
done adding constraints [122 exceptions]
time = 51.39

indices 695, 4
done creating edit constraints -- about to start resolves
time = 0.099

done resolves -- now removing constraints
time = 284.586

done removing constraints and addDel timing test
time = 67.382

----

Kazmig w/ kaffe 2/13/98:

addDel:
starting timing test. nCns = 900, nVars = 900, nResolves = 10000
done building data structures
time = 15.628
done adding constraints [122 exceptions]
time = 43.986

indices 695, 4
done creating edit constraints -- about to start resolves
time = 0.085

done resolves -- now removing constraints
time = 173.099

done removing constraints and addDel timing test
time = 52.611

--------------------
OLD VERSIONS THAT USED traceprint(foo.toString()), and thus generated lots
of really really big strings that consumed memory really badly.


Java version, before adding final-s

starting timing test. nCns = 30, nVars = 30, nResolves = 100
done building data structures
time = 5.521
done adding constraints [5 exceptions]
time = 55.102

done creating edit constraints -- about to start resolves
time = 7.029

done resolves -- now removing constraints
time = 42.242

done removing constraints and addDel timing test
time = 39.437

java ClTests  152.74s user 0.38s system 97% cpu 2:36.78 total



after adding final-s

(note more exceptiosn ===> fewer constraints, so this should be faster 
-- I need to unrandomize the rnd # generator)

addDel:
starting timing test. nCns = 30, nVars = 30, nResolves = 100
done building data structures
time = 5.484
done adding constraints [8 exceptions]
time = 57.829

done creating edit constraints -- about to start resolves
time = 6.061

done resolves -- now removing constraints
time = 28.57

done removing constraints and addDel timing test
time = 25.779

java ClTests  127.77s user 0.35s system 98% cpu 2:09.64 total


--------------
with final-s, with setValue on ClDouble-s, under kaffe

addDel:
starting timing test. nCns = 30, nVars = 30, nResolves = 100
done building data structures
time = 4.763
done adding constraints [6 exceptions]
time = 40.272

indices 5, 25
done creating edit constraints -- about to start resolves
time = 5.848

done resolves -- now removing constraints
time = 27.778

done removing constraints and addDel timing test
time = 32.443

kaffe ClTests  110.24s user 0.49s system 93% cpu 1:59.03 total

------
[Craig C. changed the Java cassowary benchmark to use Random directly and to set the
seed to 0 to start, so that the constraint system being solved is repeatable.
You might want to get my changes: see
/projects/cecil/java/src/cassowary/ClTests.java.]

On klamath (an Ultra-1/170), I get the following typical timing for Vortex:

starting timing test. nCns = 300, nVars = 300, nResolves = 1000
done building data structures
time = 1.787
done adding constraints [32 exceptions]
time = 10.054
 
done creating edit constraints -- about to start resolves
time = 0.011
 
done resolves -- now removing constraints
time = 4.331
 
done removing constraints and addDel timing test
time = 7.005


For regular java (I don't know if this is an interpreter or a JIT), I get
the following typical timings:

starting timing test. nCns = 300, nVars = 300, nResolves = 1000
done building data structures
time = 3.658
done adding constraints [32 exceptions]
time = 25.165
 
done creating edit constraints -- about to start resolves
time = 0.115
 
done resolves -- now removing constraints
time = 16.641
 
done removing constraints and addDel timing test
time = 23.153
