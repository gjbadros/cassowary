* AddConstraints, AddEditVars that turn off auto-solving?  AB suggested --04/06/00 gjb

* Get symlink made in "make dist" output (or make the symlink unnecessary somehow)

* Use rationals instead of reals?  Anthony Beurivé suggested this --09/13/99 gjb

* warning for two suggestValue-s on same variable in a row w/o intervening resolve.

* use an addVariable hook to add implicit stays
** is there a better way to represent implicit stays
** better debug-printout where stay constraints rows are omitted?

* squashing and exploding aliased variables when equality constrained

* Envelope/letter or handle/body idiom for constraints and expressions (done for ClVariable --02/26/99 gjb)

* Consider going back to virtual function and normal subclassing with slightly more complicated wrapping of variables for scwm, or use functors

* Add operator= on solver for saving solver state

* Make more obvious that variables contain their values, and you don't have to query the solver for the variable's value (similarly, variables must stay in scope throughout the solver's lifetime)

* Specifying constraints interactively
** metaphor
** toolbox

* debugging solutions
** visualization for understanding solution
** unexpected solutions
** bugs

* predicting behaviour
** user studies on expected behaviour -- Jeff -- Java applets for this?
** dynamically changing stay constraint weights to make last moved point least likely to move again
** Resetting of stay constraints -- maybe have last set of stay constraints at a lesser strength makes sense
** Hidden state -> make visible somehow
*** if invisible state matches state in user's head, it's ok
*** if not, it's bad, and need some what to see and manipulate that state

* Compound constraints (x,y for a point satisfied together)
** avoid stay-constraints on x & y of decreasing weight hack
** only count the cns as satisfied if the conjunction is satisfied


* Disjunctions

* automatic weighting, clustering of variables that should prefer to be changed together

* assertion function to check global state of tableau

* better memory management

* Revise to keep variables connected to a specific solver?

* Detect and remove redundant constraints for efficiency
** especially web application, where constraints are more static
** easy for stay constraints
** relationship to implication operator

* callbacks for internal happenings
** variables set, value changed
** constraint satisfied, unsatisfied
** start changes (before setExternalVariables runs)
** end changes (after setExternalVariables runs)
** pivoting

* user-control of choosing alternate solutions
** direct control over, e.g., pivoting

* Web page under CVS control

* Meet with Michael re: CDA details

* Implementation details

** Use ClSymbolicWeights for coefficients on zRow (the objective)

** user-controllable selection of better solutions
*** e.g., mouse button to control pivots

** register variables... why (other than for parsing)
*** Ask Kim

* Done Stuff

* read thing lab thesis, esp. chap 4 on "paths"

* Handle/Body idiom for ClVariables --02/22/99 gjb

* python wrapper -- get it working again

* Parser for constraints
** done --02/24/99 gjb

** permit multiple beginEdit()'s and have the endEdit() only remove the appropriate edit variables
This will fix the problem in changing the virtual desktop while moving a window in scwm.
  DONE Aug 1998

* test independent subgraph efficiency question -- partially done Aug 1998

** guile wrapper -- done July 1998

;;; Local Variables:
;;; eval: (outline-mode)
;;; eval: (require 'filladapt)
;;; eval: (hide-sublevels 1)
;;; End:
