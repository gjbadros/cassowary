Proposal for Reworking the 
Programming Interface to Edit Constraints in Cassowary
------------------------------------------------------

Problem:

The ClSimplexSolver::resolve method requires specifying the
new values of the edit constraints in the same order as the edit
constraints were added.  This caused confusion and difficulties when
using the Cassowary library for almost everyone, and is an unnecessary
complexity.


Proposal:

Augment ClAbstractVariables with pointers/references to their containing 
solver(s).  Then permit assignment to the ClAbstractVariables for 
which an edit constraint has been established to update the solver
internal state corresponding to that edit variable.  This "assignment"
can be done with a "setValue(double)" method, and C++'s assignment
operator can be overloaded for syntactic sugar, if desired. 

Multiple such assignments set all edit variable values, then a
ClSimplexSolver::resolve() message is sent to re-solve the tableau.  

Edit constraints could be added and removed more easily using two new
methods:  addEditVar(ClAbstractVariable) and
removeEditVar(ClAbstractVar). These would both be thin wrappers over
building an EditConstraint and calling addConstraint or
removeConstraint.

Thus, code that used to look like:

    peditX = new ClEditConstraint(db[idbDragging].X(),clsStrong());
    peditY = new ClEditConstraint(db[idbDragging].Y(),clsStrong());
    solver
      .addConstraint(*peditX)
      .addConstraint(*peditY)
      ;
. . . 

    solver.resolve(e->x(),e->y());
. . . 

    solver
	.removeConstraint(*peditX)
	.removeConstraint(*peditY)
	;


would be replaced with:

    solver
	.addEditVar(db[idbDragging].X())
	.addEditVar(db[idbDragging].Y())
	;
. . .

    db[idbDragging].X().suggestValue(e->x());
    db[idbDragging].Y().suggestValue(e->y());
    solver.resolve();
. . . 

    solver
	.removeEditVar(db[idbDragging].X())
	.removeEditVar(db[idbDragging].Y())
	;


Alternatively, the pointer/reference to the containing solver(s) could
be omitted, and instead the code would look like:

    solver
	.addEditVar(db[idbDragging].X())
	.addEditVar(db[idbDragging].Y())
	;
. . .

    solver
	.suggestValue(db[idbDragging].X().e->x())
	.suggestValue(db[idbDragging].Y().e->y())
	.resolve();
. . . 

    solver
	.removeEditVar(db[idbDragging].X())
	.removeEditVar(db[idbDragging].Y())
	;


We may want to add a "removeAllEditVars" function, too, as that seems to 
be the common case:

solver.removeAllEditVars();

And endEdit() can be added to call removeAllEditVars().

I implemented the second solution in C++ on 11-Jun-1998.

QuadDemoWindow's relevant parts now look like:


buttonPress
-----------
    solver
      .addEditVar(db[idbDragging].X())
      .addEditVar(db[idbDragging].Y())
      .beginEdit();

dragging
--------
    // e is the MouseEvent object: e.g., e->x() is the X coord of the pointer
    solver
      .suggestValue(db[idbDragging].X(),e->x())
      .suggestValue(db[idbDragging].Y(),e->y())
      .resolve();
    repaint();


buttonRelease
-------------
    solver.endEdit();
    repaint();




