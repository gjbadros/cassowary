Differences between the two implementations of
the Cassowary Constraint Solver
(Casso = implementation in C++ by Badros,
 QOCA  = implementation in C++ by Finlay and Chok)


"***" denote action items from meeting 15-Mar-1999 w/ Kim & Sitt-Sen

Performance (on bowman):
 Casso:
	17 ms for add
	1.3 ms for resolve
	1.3 ms for remove
 QOCA:
	14 ms for add
	3.3 ms for resolve
	4.3 ms for remove

Prefix:
 Casso: Cl == Constraint Library (on both filenames and classes)
 QOCA: Qc (on filenames only, not classes)
*** namespace support in egcs yet?  **nope, not in 1.1.1 (i.e., egcs-2.91.60) --03/16/99 gjb

Naming convention:
 Casso: mixed initial caps (original are lowercase), often Hungarian
 QOCA: Initial caps on all fns.
*** Casso: use initial caps **done --03/16/99 gjb

Top level include:
 Casso: "Cl.h"
 QOCA: "QcCassSolver.h"
*** Qoca: Add a Qc.h header file that #includes the relevant subsolver header files


Casso: ClVariable x(NAME, VALUE) among others
QOCA: CFloatHandle x(stay_weight, edit_weight, desired_value)
-> Casso's weights are attached to constraints, not variables!
*** Casso: Add ClVariable::ClVariable(string name, double value, 
	                              const ClStrength &stay_strength, const ClStrength &editStrength)
*** Casso: Add list of solver that the variable is in, or keep the error value with the variable
    (instead of in the Solver)
*** Qoca: Reorder arguments to CFloatHandle, and add name argument.

Casso: Must addStay-s explicitly
QOCA: stay strength implicit in creation of the variable via CFloatHandle ctr,
      and stay is added when variable is registered (either when first
      encountered or by AddVar call).
*** Casso: Add AddVar(ClVariable v) to add the stay constraint if v has a stay_strength associated.


Casso: ClSimplexSolver solver;
QOCA: CassSolver solver;


Casso: addEditVar
QOCA: SetEditVar
*** Casso: use the variable's editStrength (from ctr) as the default instead of clsStrong()
    (+ fix initial caps)
*** Qoca: Rename to AddEditVar


Casso: solver.suggestValue(x,100)
QOCA: x.SuggestValue(100) // vars know which solver they're in
*** Casso: ClVariable::SuggestValue(..) should iterate over solvers that have var and 
call Solver::SuggestValue on them
*** QOCA: add a Solver::SuggestValue(CFloatHandle x, double v)
         { /* assert x in this */ x.SuggestValue(v) }


Casso: value()
QOCA: GetValue()
*** QOCA: Rename to Value()
*** Casso: Fix initial caps


Casso: ClLinearExpression
QOCA: LinPoly
-> LinPoly does *not* have a constant built into it -- only appears when you make a constraint
*** QOCA: Add constant into LinPoly class


**** QOCA: Generalize constraint building, fix operator overloading

Casso: ClConstraint()
QOCA: ConstraintHandle

Casso: ClLinearEquation, ClLinearInequality
QOCA: ConstraintHandle(expr), ConstraintHandle(expr, LE)


Casso's makefile is more sophisticated, configurable than QOCA's
*** Done already.


Casso permits chaining of calls by returning reference to solver.
*** QOCA: Consider returning a Solver & from most functions


QOCA uses operator-overloading to build constraints.
*** QOCA: get this working more generally, and reliably


Casso has resolve() call implicit in an endEdit();
*** Casso: Consider this a defensive-programming optimization, leave the
    need for resolve to be called in the official spec.


Casso has solve() implicit in addConstraint, removeConstraint;  QOCA
must call Solve() explicitly.
*** QOCA: Add Solver::SetAutoSolve(bool f) function
*** Casso: Switch to default to not implicit solving


QOCA seg-faults when an unknown variable is encountered-- it'd be nice
if it threw an exception instead.
*** QOCA: Use an exception hierarchy pervasively


*** QOCA: Integrate string-based parser

*** QOCA: Use wrappers for guile, python, STk, ...

*** QOCA: Permit non-required constraints via introduced error variables

*** Casso: Link to QOCA home page.

*** Casso: Add ChangeConstraint

*** Casso: Seperate ClStrength objects from Constraints -- only use them when adding
