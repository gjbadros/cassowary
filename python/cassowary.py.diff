*** cassowary.py-orig	Mon Feb 23 14:16:20 1998
--- cassowary.py	Mon Feb 23 14:18:53 1998
***************
*** 1,5 ****
--- 1,8 ----
+ # vim: set ts=4 sw=4 et:
  # This file was created automatically by SWIG.
  import cassowaryc
+ from types import *
+ 
  class ClVariablePtr :
      def __init__(self,this):
          self.this = this
***************
*** 12,35 ****
          return val
      def __repr__(self):
          return "<C ClVariable instance>"
  class ClVariable(ClVariablePtr):
!     def __init__(self,arg0) :
!         self.this = cassowaryc.new_ClVariable(arg0)
          self.thisown = 1
  
  
  
- def ClVariableNamed(*args) :
-     val = ClVariablePtr(apply(cassowaryc.new_ClVariableNamed,()+args))
-     val.thisown = 1
-     return val
- 
- def ClVariablePrefix(arg0,arg1,*args) :
-     val = ClVariablePtr(apply(cassowaryc.new_ClVariablePrefix,(arg0,arg1,)+args))
-     val.thisown = 1
-     return val
- 
- 
  class ClPointPtr :
      def __init__(self,this):
          self.this = this
--- 15,64 ----
          return val
      def __repr__(self):
          return "<C ClVariable instance>"
+     def __add__(self, right):
+         return ClLinearExpression(self).plus(right)
+     def __radd__(self, left):
+         return ClLinearExpression(left).plus(self)
+     def __sub__(self, right):
+         return ClLinearExpression(self).minus(right)
+     def __rsub__(self, left):
+         return ClLinearExpression(left).minus(self)
+     def __mul__(self, right):
+         return ClLinearExpression(self).times(right)
+     def __rmul__(self, left):
+         return ClLinearExpression(left).times(self)
+     def __div__(self, right):
+         return ClLinearExpression(self).divide(right)
+     def __rdiv__(self, left):
+         return ClLinearExpression(left).divide(self)
  class ClVariable(ClVariablePtr):
!     def __init__(self,*arg0) :
!         if len(arg0) == 0:
!             self.this = apply(cassowaryc.new_ClVariableNamed, arg0)
!         elif len(arg0) == 1:
!             if type(arg0[0]) in [FloatType, IntType]:
!                 self.this = apply(cassowaryc.new_ClVariable, arg0)
!             elif type(arg0[0]) is StringType:
!                 self.this = apply(cassowaryc.new_ClVariableNamed, arg0)
!             else:
!                 raise TypeError, "ClVariable constructor"
!         elif len(arg0) == 2:
!             if type(arg0[0]) is StringType and type(arg0[1]) in \
!                 [FloatType, IntType]:
!                 self.this = apply(cassowaryc.new_ClVariableNamed, arg0)
!             elif type(arg0[0]) in [FloatType, IntType] and type(arg0[1]) \
!                 is StringType:
!                 self.this = apply(cassowaryc.new_ClVariablePrefix, arg0)
!             else:
!                 raise TypeError, "ClVariable constructor"
!         elif len(arg0) == 3:
!             self.this = apply(cassowaryc.new_ClVariablePrefix, arg0)
!         else:
!             raise TypeError, "ClVariable constructor"
          self.thisown = 1
  
  
  
  class ClPointPtr :
      def __init__(self,this):
          self.this = this
***************
*** 51,68 ****
      def __repr__(self):
          return "<C ClPoint instance>"
  class ClPoint(ClPointPtr):
!     def __init__(self) :
!         self.this = cassowaryc.new_ClPoint()
          self.thisown = 1
  
  
  
- def ClPointXY(arg0,arg1) :
-     val = ClPointPtr(cassowaryc.new_ClPointXY(arg0,arg1))
-     val.thisown = 1
-     return val
- 
- 
  class ClStrengthPtr :
      def __init__(self,this):
          self.this = this
--- 80,96 ----
      def __repr__(self):
          return "<C ClPoint instance>"
  class ClPoint(ClPointPtr):
!     def __init__(self, *args) :
!         if len(args) == 0:
!             self.this = cassowaryc.new_ClPoint()
!         elif len(args) == 2:
!             self.this = apply(cassowaryc.new_ClPointXY, args)
!         else:
!             raise TypeError, "ClPoint constructor"
          self.thisown = 1
  
  
  
  class ClStrengthPtr :
      def __init__(self,this):
          self.this = this
***************
*** 96,118 ****
      def __repr__(self):
          return "<C ClLinearEquation instance>"
  class ClLinearEquation(ClLinearEquationPtr):
!     def __init__(self,arg0,arg1,*args) :
!         self.this = apply(cassowaryc.new_ClLinearEquation,(arg0.this,arg1.this,)+args)
          self.thisown = 1
  
  
- 
- def ClLinearEquation1(arg0,arg1,arg2,*args) :
-     val = ClLinearEquationPtr(apply(cassowaryc.new_ClLinearEquation1,(arg0.this,arg1.this,arg2.this,)+args))
-     val.thisown = 1
-     return val
- 
- def ClLinearEquation2(arg0,arg1,arg2,*args) :
-     val = ClLinearEquationPtr(apply(cassowaryc.new_ClLinearEquation2,(arg0.this,arg1.this,arg2.this,)+args))
-     val.thisown = 1
-     return val
- 
- 
  class ClLinearInequalityPtr(ClConstraintPtr):
      def __init__(self,this):
          self.this = this
--- 124,160 ----
      def __repr__(self):
          return "<C ClLinearEquation instance>"
  class ClLinearEquation(ClLinearEquationPtr):
!     def __init__(self,*args) :
!         if len(args) < 1 or len(args) > 4:
!             raise TypeError, 'ClLinearEquation constructor'
!         if type(args[-1]) in [FloatType, IntType]:
!             weight = args[-1]
!             strength = args[-2]
!             args = args[:-2]
!         else:
!             weight = 1.0
!             if type(args[-1]) is InstanceType and (args[-1].__class__ ==\
!                 ClStrengthPtr or args[-1].__class__ == ClStrength):
!                 strength = args[-1]
!                 args = args[:-1]
!             else:
!                 strength = clsRequired()
!         if len(args) == 1:
!             self.this = apply(cassowaryc.new_ClLinearEquation, 
!                 tuple(map(lambda x: x.this, args))+(strength.this, weight))
!         elif len(args) == 2:
!             if type(args[0]) is InstanceType and (args[0].__class__ ==\
!                 ClVariable or args[0].__class__ == ClVariablePtr):
!                 self.this = apply(cassowaryc.new_ClLinearEquation1,
!                     tuple(map(lambda x: x.this, args))+(strength.this, weight))
!             else:
!                 self.this = apply(cassowaryc.new_ClLinearEquation2,
!                     tuple(map(lambda x: x.this, args))+(strength.this, weight))
!         else:
!             raise TypeError, 'ClLinearEquation constructor'
          self.thisown = 1
  
  
  class ClLinearInequalityPtr(ClConstraintPtr):
      def __init__(self,this):
          self.this = this
***************
*** 120,142 ****
      def __repr__(self):
          return "<C ClLinearInequality instance>"
  class ClLinearInequality(ClLinearInequalityPtr):
!     def __init__(self,arg0,arg1,*args) :
!         self.this = apply(cassowaryc.new_ClLinearInequality,(arg0.this,arg1.this,)+args)
          self.thisown = 1
  
  
  
- def ClLinearInequality1(arg0,arg1,arg2,arg3,*args) :
-     val = ClLinearInequalityPtr(apply(cassowaryc.new_ClLinearInequality1,(arg0.this,arg1,arg2.this,arg3.this,)+args))
-     val.thisown = 1
-     return val
- 
- def ClLinearInequality2(arg0,arg1,arg2,arg3,*args) :
-     val = ClLinearInequalityPtr(apply(cassowaryc.new_ClLinearInequality2,(arg0.this,arg1,arg2.this,arg3.this,)+args))
-     val.thisown = 1
-     return val
- 
- 
  class ClLinearExpressionPtr :
      def __init__(self,this):
          self.this = this
--- 162,209 ----
      def __repr__(self):
          return "<C ClLinearInequality instance>"
  class ClLinearInequality(ClLinearInequalityPtr):
!     def __init__(self,*args) :
!         if len(args) < 1 or len(args) > 5:
!             raise TypeError, 'ClLinearInequality constructor'
!         if type(args[-1]) in [FloatType, IntType] and len(args) == 5:
!             weight = args[-1]
!             strength = args[-2]
!             args = args[:-2]
!         else:
!             weight = 1.0
!             if type(args[-1]) is InstanceType and (args[-1].__class__ ==\
!                 ClStrengthPtr or args[-1].__class__ == ClStrength):
!                 strength = args[-1]
!                 args = args[:-1]
!             else:
!                 strength = clsRequired()
!         if len(args) == 1:
!             self.this = apply(cassowaryc.new_ClLinearInequality, 
!                 tuple(map(lambda x: x.this, args))+(strength.this, weight))
!         elif len(args) == 3:
!             # Set up 3rd arg
!             if type(args[2]) is InstanceType and (args[2].__class__ ==\
!                 ClLinearExpression or \
!                 args[2].__class__ == ClLinearExpressionPtr):
!                 thirdarg = args[2]
!             else:
!                 thirdarg = ClLinearExpression(args[2])
!             # Make the right call
!             if type(args[0]) is InstanceType and (args[0].__class__ ==\
!                 ClVariable or args[0].__class__ == ClVariablePtr):
!                 self.this = apply(cassowaryc.new_ClLinearInequality1,
!                     (args[0].this, args[1], thirdarg.this) +
!                     (strength.this, weight))
!             else:
!                 self.this = apply(cassowaryc.new_ClLinearInequality2,
!                     (args[0].this, args[1], thirdarg.this) +
!                     (strength.this, weight))
!         else:
!             raise TypeError, 'ClLinearInequality constructor'
          self.thisown = 1
  
  
  
  class ClLinearExpressionPtr :
      def __init__(self,this):
          self.this = this
***************
*** 145,203 ****
          if self.thisown == 1 :
              cassowaryc.delete_ClLinearExpression(self.this)
      def times(self,arg0):
!         val = cassowaryc.ClLinearExpression_times(self.this,arg0)
!         val = ClLinearExpressionPtr(val)
!         val.thisown = 1
!         return val
!     def timesE(self,arg0):
!         val = cassowaryc.ClLinearExpression_timesE(self.this,arg0.this)
          val = ClLinearExpressionPtr(val)
          val.thisown = 1
          return val
      def plus(self,arg0):
!         val = cassowaryc.ClLinearExpression_plus(self.this,arg0.this)
          val = ClLinearExpressionPtr(val)
          val.thisown = 1
          return val
      def minus(self,arg0):
!         val = cassowaryc.ClLinearExpression_minus(self.this,arg0.this)
          val = ClLinearExpressionPtr(val)
          val.thisown = 1
          return val
      def divide(self,arg0):
!         val = cassowaryc.ClLinearExpression_divide(self.this,arg0)
!         val = ClLinearExpressionPtr(val)
!         val.thisown = 1
!         return val
!     def divideE(self,arg0):
!         val = cassowaryc.ClLinearExpression_divideE(self.this,arg0.this)
          val = ClLinearExpressionPtr(val)
          val.thisown = 1
          return val
      def divFrom(self,arg0):
!         val = cassowaryc.ClLinearExpression_divFrom(self.this,arg0.this)
          val = ClLinearExpressionPtr(val)
-         val.thisown = 1
          return val
      def subtractFrom(self,arg0):
!         val = cassowaryc.ClLinearExpression_subtractFrom(self.this,arg0.this)
!         val = ClLinearExpressionPtr(val)
!         val.thisown = 1
!         return val
!     def addExpression(self,arg0,*args):
!         val = apply(cassowaryc.ClLinearExpression_addExpression,(self.this,arg0.this,)+args)
!         val = ClLinearExpressionPtr(val)
!         return val
!     def addExpression1(self,arg0,arg1,arg2,arg3):
!         val = cassowaryc.ClLinearExpression_addExpression1(self.this,arg0.this,arg1,arg2.this,arg3.this)
!         val = ClLinearExpressionPtr(val)
!         return val
!     def addVariable(self,arg0,arg1):
!         val = cassowaryc.ClLinearExpression_addVariable(self.this,arg0.this,arg1)
!         val = ClLinearExpressionPtr(val)
!         return val
!     def addVariable1(self,arg0,arg1,arg2,arg3):
!         val = cassowaryc.ClLinearExpression_addVariable1(self.this,arg0.this,arg1,arg2.this,arg3.this)
          val = ClLinearExpressionPtr(val)
          return val
      def setVariable(self,arg0,arg1):
--- 212,315 ----
          if self.thisown == 1 :
              cassowaryc.delete_ClLinearExpression(self.this)
      def times(self,arg0):
!         if type(arg0) in [FloatType, IntType]:
!             val = cassowaryc.ClLinearExpression_times(self.this,arg0)
!         elif type(arg0) is InstanceType and (arg0.__class__ ==
!             ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
!             val = cassowaryc.ClLinearExpression_timesE(self.this, arg0.this)
!         else: # type(arg0) is a ClVariable
!             expr = ClLinearExpression(arg0)
!             val = cassowaryc.ClLinearExpression_timesE(self.this,
!                 expr.this)
          val = ClLinearExpressionPtr(val)
          val.thisown = 1
          return val
+     def __mul__(self, arg0):
+         return self.times(arg0)
+     def __rmul__(self, arg0):
+         return self.times(arg0)
      def plus(self,arg0):
!         if type(arg0) is InstanceType and (arg0.__class__ ==
!             ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
!             val = cassowaryc.ClLinearExpression_plus(self.this, arg0.this)
!         else:
!             expr = ClLinearExpression(arg0)
!             val = cassowaryc.ClLinearExpression_plus(self.this,
!                 expr.this)
          val = ClLinearExpressionPtr(val)
          val.thisown = 1
          return val
+     def __add__(self, arg0):
+         return self.plus(arg0)
+     def __radd__(self, arg0):
+         return self.plus(arg0)
      def minus(self,arg0):
!         if type(arg0) is InstanceType and (arg0.__class__ ==
!             ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
!             val = cassowaryc.ClLinearExpression_minus(self.this, arg0.this)
!         else:
!             expr = ClLinearExpression(arg0)
!             val = cassowaryc.ClLinearExpression_minus(self.this,
!                 expr.this)
          val = ClLinearExpressionPtr(val)
          val.thisown = 1
          return val
+     def __sub__(self, arg0):
+         return self.minus(arg0)
+     def __rsub__(self, left):
+         return ClLinearExpression(left).minus(arg0)
      def divide(self,arg0):
!         if type(arg0) is InstanceType and (arg0.__class__ ==
!             ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
!             val = cassowaryc.ClLinearExpression_divideE(self.this, arg0.this)
!         elif type(arg0) in [FloatType, IntType]:
!             val = cassowaryc.ClLinearExpression_divide(self.this, arg0)
!         else: # type(arg0) is ClVariable
!             expr = ClLinearExpression(arg0)
!             val = cassowaryc.ClLinearExpression_divideE(self.this,
!                 expr.this)
          val = ClLinearExpressionPtr(val)
          val.thisown = 1
          return val
+     def __div__(self, arg0):
+         return self.divide(arg0)
+     def __rdiv__(self, left):
+         return ClLinearExpression(left).divide(self)
      def divFrom(self,arg0):
!         if type(arg0) is InstanceType and (arg0.__class__ ==
!             ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
!             val = cassowaryc.ClLinearExpression_divFrom(self.this, arg0.this)
!         else:
!             expr = ClLinearExpression(arg0)
!             val = cassowaryc.ClLinearExpression_divFrom(self.this,
!                 expr.this)
          val = ClLinearExpressionPtr(val)
          return val
      def subtractFrom(self,arg0):
!         if type(arg0) is InstanceType and (arg0.__class__ ==
!             ClLinearExpression or arg0.__class__ == ClLinearExpressionPtr):
!             val = cassowaryc.ClLinearExpression_subtractFrom(self.this,
!             arg0.this)
!         else:
!             expr = ClLinearExpression(arg0)
!             val = cassowaryc.ClLinearExpression_subtractFrom(self.this,
!                 expr.this)
!         val = ClLinearExpressionPtr(val)
!         return val
!     def addExpression(self,*args):
!         if len(args) == 4:
!             val = apply(cassowaryc.ClLinearExpression_addExpression1,
!                 (self.this, args[0].this, args[1], args[2].this, args[3].this))
!         else:
!             val = apply(cassowaryc.ClLinearExpression_addExpression,
!                 (self.this, args[0].this,) + tuple(args[1:]))
!         val = ClLinearExpressionPtr(val)
!         return val
!     def addVariable(self,*args):
!         if len(args) == 4:
!             val = cassowaryc.ClLinearExpression_addVariable1(self.this,arg0.this,arg1,arg2.this,arg3.this)
!         else: # len(args) == 2
!             val = cassowaryc.ClLinearExpression_addVariable(self.this,arg0.this,arg1)
          val = ClLinearExpressionPtr(val)
          return val
      def setVariable(self,arg0,arg1):
***************
*** 211,228 ****
      def __repr__(self):
          return "<C ClLinearExpression instance>"
  class ClLinearExpression(ClLinearExpressionPtr):
!     def __init__(self,arg0,*args) :
!         self.this = apply(cassowaryc.new_ClLinearExpression,(arg0.this,)+args)
          self.thisown = 1
  
  
  
- def ClLinearExpressionNum(*args) :
-     val = ClLinearExpressionPtr(apply(cassowaryc.new_ClLinearExpressionNum,()+args))
-     val.thisown = 1
-     return val
- 
- 
  class ClSimplexSolverPtr :
      def __init__(self,this):
          self.this = this
--- 323,343 ----
      def __repr__(self):
          return "<C ClLinearExpression instance>"
  class ClLinearExpression(ClLinearExpressionPtr):
!     def __init__(self,*args) :
!         if len(args) < 1 or len(args) > 3:
!             raise TypeError, 'ClLinearExpression constructor'
!         if type(args[0]) is InstanceType and (args[0].__class__ ==\
!             ClVariable or args[0].__class__ == ClVariablePtr):
!             self.this = apply(cassowaryc.new_ClLinearExpression,
!                 (args[0].this,) + tuple(args[1:]))
!         elif type(args[0]) in [FloatType, IntType]:
!             self.this = apply(cassowaryc.new_ClLinearExpressionNum, args)
!         else:
!             raise TypeError, 'ClLinearExpression constructor'
          self.thisown = 1
  
  
  
  class ClSimplexSolverPtr :
      def __init__(self,this):
          self.this = this
***************
*** 250,265 ****
          val = cassowaryc.ClSimplexSolver_addPointStays(self.this,arg0)
          val = ClSimplexSolverPtr(val)
          return val
!     def addPointStay(self,arg0,arg1):
!         val = cassowaryc.ClSimplexSolver_addPointStay(self.this,arg0.this,arg1)
          val = ClSimplexSolverPtr(val)
          return val
!     def addPointStayXY(self,arg0,arg1,arg2):
!         val = cassowaryc.ClSimplexSolver_addPointStayXY(self.this,arg0.this,arg1.this,arg2)
!         val = ClSimplexSolverPtr(val)
!         return val
!     def addStay(self,arg0,arg1,*args):
!         val = apply(cassowaryc.ClSimplexSolver_addStay,(self.this,arg0.this,arg1.this,)+args)
          val = ClSimplexSolverPtr(val)
          return val
      def removeConstraint(self,arg0):
--- 365,391 ----
          val = cassowaryc.ClSimplexSolver_addPointStays(self.this,arg0)
          val = ClSimplexSolverPtr(val)
          return val
!     def addPointStay(self,*args):
!         if len(args) == 3:
!             val = cassowaryc.ClSimplexSolver_addPointStayXY(self.this,
!                  args[0].this,args[1].this,args[2])
!         else: # len(args) == 2
!             val = cassowaryc.ClSimplexSolver_addPointStay(self.this,
!                args[0].this,args[1])
          val = ClSimplexSolverPtr(val)
          return val
!     def addStay(self,arg0,*args):
!         if len(args) == 2:
!             weight = args[1]
!             strength = args[0]
!         elif len(args) == 1:
!             weight = 1.0
!             strength = args[0]
!         else:
!             weight = 1.0
!             strength = clsWeak()
!         val = apply(cassowaryc.ClSimplexSolver_addStay,(self.this,arg0.this,
!             strength.this, weight))
          val = ClSimplexSolverPtr(val)
          return val
      def removeConstraint(self,arg0):
***************
*** 269,279 ****
      def reset(self):
          val = cassowaryc.ClSimplexSolver_reset(self.this)
          return val
!     def resolve(self,arg0):
!         val = cassowaryc.ClSimplexSolver_resolve(self.this,arg0)
!         return val
!     def resolveXY(self,arg0,arg1):
!         val = cassowaryc.ClSimplexSolver_resolveXY(self.this,arg0,arg1)
          return val
      def __repr__(self):
          return "<C ClSimplexSolver instance>"
--- 395,407 ----
      def reset(self):
          val = cassowaryc.ClSimplexSolver_reset(self.this)
          return val
!     def resolve(self,*args):
!         if len(args) == 1:
!             val = apply(cassowaryc.ClSimplexSolver_resolve, (self.this,) +
!                 args)
!         else: # len(args) == 2
!             val = apply(cassowaryc.ClSimplexSolver_resolveXY, (self.this,) +
!                 args)
          return val
      def __repr__(self):
          return "<C ClSimplexSolver instance>"
***************
*** 292,299 ****
      def __repr__(self):
          return "<C ClEditConstraint instance>"
  class ClEditConstraint(ClEditConstraintPtr):
!     def __init__(self,arg0,arg1,*args) :
!         self.this = apply(cassowaryc.new_ClEditConstraint,(arg0.this,arg1.this,)+args)
          self.thisown = 1
  
  
--- 420,433 ----
      def __repr__(self):
          return "<C ClEditConstraint instance>"
  class ClEditConstraint(ClEditConstraintPtr):
!     def __init__(self,arg0,*args) :
!         if not args:
!             strength = clsStrong()
!         else:
!             strength = args[0]
!             args = args[1:]
!         self.this = apply(cassowaryc.new_ClEditConstraint,(arg0.this,
!             strength.this,)+args)
          self.thisown = 1
  
  
