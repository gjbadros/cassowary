Fri Feb 19 17:41:45 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/ClFloatVariable.cc, c++/ClFloatVariable.h: Added -- moved
	here from ClVariable.h, and renamed from class ClVariableRep since 
	they not what ClVariable wraps (ClVariable wraps
	ClAbstractVariable)

	* c++/ClAbstractVariable.h: Fatten interface to include set_value, 
	change_value, setPv, and Pv.

	* c++/ClVariable.h, c++/ClVariable.cc: Move ClVariableRep into
	ClFloatVariable.{h,cc}, and use pclv-> for
	set_value, change_value, SetPv, and Pv since ClAbstractVariable
	now has a fat interface and we do not need to do the dynamic
	down-casting. 

	* c++/Makefile: Added new files to build rules.

Fri Feb 19 17:08:29 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/debug.h, c++/ClTableau.h: Move operator<< out into ClTableau.h

	* c++/ClVariable.h, c++/ClVariable.cc: Move some inline functions
	into .cc so that the hash function can go in the .h file (some stl 
	dependency issue, it seems).

	* c++/ClErrors.h, c++/ClTypedefs.h: Move typedef for
 	ClConstraintSet from ClErrors.h into ClTypedefs.h, and have former 
	include the latter.

	* c++/Cassowary.h: #include ClConstraintHash.h

	* c++/ClConstraintHash.h: Added.  The hash function needs to
	appear before any typedef that uses a hash_map or hash_set, so
	this file is included by Cassowary.h

Fri Feb 19 08:45:24 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/ClSubgraphTest.cc: Fix some bugs just from not testing
	completely. 

	* c++/*: Fix bugs from not-updated-code hidden by #ifdefs.  Builds 
	w/ all compile-options except -DCL_USE_HASH_MAP_AND_SET.  Drop
	some gratuitous appearances of ClAbstractVariable

Thu Feb 18 18:53:56 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/ClLinearExpression.cc: Use clvNill when returning a
	ClVariable instead of NULL

	* c++/ClVariable.h, c++/ClVariable.cc: operators ==, !=, < all should use the
	contained pointers address, not value.  Also define global clvNil,
	isNil(). 

	* c++/ClTests.cc: BUGFIX: #if 0 removed from adding stays in
	simple1 test

	* c++/ClSimplexSolver.h:  Use ClVariable-s internally for
	ClObjectiveVariable-s.

	* c++/ClSimplexSolver.cc: Use ClVariable-s internally for
	ClObjectiveVariable-s and replace ClAbstractVariable
	*p{entryVar,exitVar} with ClVariable-s.  (Use clvNil and isNil()
	to test for not yet set).

Thu Feb 18  Greg J Badros  <gjb@cs.washington.edu>
	
	* c++/*: First compilable and almost working version with
 	ClVariable as a handle to ClVariableRep.  Major simplifications
	throughout.

Thu Feb 18 14:22:14 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/Makefile: Split out the options into += lists so they can be 
	flipped independently more easily.
	
	* c++/ClSimplexSolver.cc, c++/ClSimplexSolver.h: Added output
	operation for ClConstraintToVarSetMap;  use fFoundErrorVar flag to 
	simplify some redundant tests in removeConstraint -- no longer use 
	errorVarsCopy.

	* c++/CLVariable.h: Fix a comment's example.

	* c++/ClTypedefs.h: Use set always for ClTableauVarSet (Steve
	Wolfman notes that it's faster as a set than as a hash_set).

	* c++/debug.h: Add CtrTracer, DtrTracer fns that do nothing when
	not CL_TRACE

	* c++/ClConstraint.h:  Invoke CtrTracer, DtrTracer in ctr, dtr for 
	finding memory problem

	* c++/ClTests.cc: Fix some long-time bugs in the use of ctrs that
	build temporary objects whose lifetime was expected to be longer
	than it was.

	* c++/*: Invert sense of CL_NO_TRACE to CL_TRACE

Wed Feb 17 12:10:28 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/ClTypedefs.h: Added -- factored out useful typedefs from
	ClSimplexSolver.h, ClTableau.h and put them in this file.

	* c++/ClTableau.h, c++/ClSimplexSolver.h, c++/debug.h:  Use
	ClTypedefs.h.  Drop gdb_print (it uses printOn and printTo, now).
	Renamed printDebugInfo to printOnVerbose (for generalized gdb
	interface)

	* c++/ClSimplexSolver.cc: Fix two bugs where I was modifying data
	structures indirectly while iterating over them.  Remove a delete
	that was premature to fix another bug in optimized builds.

	* c++/ClLinearExpression.h, c++/ClConstraint.h,
 	c++/ClAbstractVariable.h: Drop gdb_print().

	* c++/ClSymbolicWeight.h: Use Number instead of double more consistently.

Tue Feb 16 15:04:06 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/Cassowary.h,ClAbstractVariable.h,ClMap.h,ClSet.h,Makefile: Use 
	CL_USE_HASH_MAP_AND_SET, not USE_HASH_MAP_AND_SET. 

	* c++/Cl.h: #undef CL_TRACE_VERBOSE ifdef CL_NO_IO

Tue Feb 16 14:55:12 1999  Greg J Badros  <gjb@cs.washington.edu>

	* java/ClVariable.java: Add setVarMap(..), getVarMap() for
	maintaining symbol table of ClVariables.  Added
	setAttachedObject(..), getAttachedObject() for hanging something
	off of a variable.

	* java/ClConstraint.java: Added setAttachedObject(..),
 	getAttachedObject() for hanging something off of a constraint.

	* java/ClTests.java:  Added inconsistent3() and multiedit() tests

	* java/ClSimplexSolver.java: Manage multiple (nested) edits
	properly.  Provide access to the _markerVars var through
	getConstraintMap() accessor.  Deprecate resolve(Vector) fn.

Tue Feb 16 14:29:46 1999  Greg J Badros  <gjb@cs.washington.edu>

	* README: Updated reference to swig web site.

Tue Feb 16 12:45:04 1999  Greg J Badros  <gjb@cs.washington.edu>

	* java/ClSimplexSolver.java, java/ClEditInfo.java, java/Makefile: 
	Fixed Michael Kaufmann's bug.  (See Feb 15 note for C++ version
	two entries below.)

	* java/*.java: Updated copyright to include 1999. 

Tue Feb 16 10:51:01 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/*: Added CL_FIND_LEAK guard and ctr/ctr counters for
	tracking various variable kinds.

Mon Feb 15 18:38:06 1999  Greg J Badros  <gjb@cs.washington.edu>

	* c++/ClAbstractVariable.{cc,h}, ClSlackVariable.{cc,h},
	ClDummyVariable.{cc,h}: Add counters to ctr/dtr for leakage detection.

	* c++/ClSimplexSolver.{cc,h}: Replace ClConstraintAndIndex with
	ClEditInfo, and remove ugliness of parallel vectors for edit
	constraints. Drop _editPlusErrorVars, _editMinusErrorVars,
	_prevEditConstants, and bundle them all up in the value end of the 
	map attached to _editVarMap.  This fixes a bug reported in the
	Java version by Michael Kaufmann long ago, and generally cleans
	code up a bit.  The resolve(vector<Number>) function is
	deprecated, and now implemented in terms of the indices stored in
	the new ClEditInfo class.

	* c++/*: Updated copyright to include 1999.

1999-02-15  Greg J Badros  <gjb@cs.washington.edu>

	* c++/ClVariable.{cc,h}, c++/ClAbstractVariable.h: Added
	SetVarMap(..), VarMap(), and make variables given names get their
	names mapped to the objects in the var map (for access when
	parsing constraints as strings).  Make setName() virtual so
	ClVariable can override it.

1999-02-12  Greg J Badros  <gjb@cs.washington.edu>

	* c++/creader.{y,h}: New version from Steve Wolfman, slightly
	updated for cleaner integration. Pass in a map<string,ClVariable
	*> instead of an array of ClVariable; improve error handling a
	bit.

	* c++/debug.h: Use ClMap, ClSet

	* c++/{ClMap.h,ClSet.h}: Added, for optionally using hash_map,
	hash_set instead of map, set.

	* c++/ClSimplexSolver.{cc,h}: Added Steve Wolfman's explanation
	support (added back map for marker->constraint, _fExplainFailure
	var + getter & settor).  Use ClMap, ClSet.  Cleaned up some cerr
	output, and use DEBUG_FAILURES cpp symbol to guard some output.

	* c++/Cassowary.h: Added operator() for hash<..> to support
	hashing things used as keys in hash_map/hash_set

	* c++/ClErrors.h: Added ExCLRequiredFailureWithExplanation class
	for explanation support.

	* c++/{ClLinearExpression.h,ClTableau.h}: Use ClMap, not map. Use
	ClSet, not set.

	* c++/ClSymbolicWeight.h: Return a symbolic weight even when
	assert(false) to avoid compiler warning.

1999-02-11  Greg J Badros  <gjb@cs.washington.edu>

	* guile/cassowary_scm.cc: Use cl-snarf.h, not scwm-snarf.h.  Use
	CL_PROC to denote primitives, not SCWM_PROC.  Use
	CL_VAR_INIT_PERMANENT macro for variables, and document them (the
	strength objects only, for now).  Fix the default strength of
	cl-add-editvar to Strong, not Weak, and update docs (was cut&paste
	error from the cl-add-stay primitive).  Thanks Anthony Beurivé for
	noticing this bug, too!

Sat Jan 30 13:16:31 1999  Greg Badros  <gjb@cs.washington.edu>

	* c++/ClSimplexSolver.cc: Fixed bug in removing a stay
	constraint.  Was editing a vector in place while iterating over
	it.  Now I use remove_if and erase.  Thanks to Anthony Beurivé for 
	noticing the bug.

	* c++/ClBug1.cc: Added -- bug report from Anthony Beurivé.

Sat Jan 23 16:46:27 1999  Greg Badros  <gjb@cs.washington.edu>

	* guile/cassowary_scm.cc: Replace iarg uses with literal argument
	index numbers.  Use const_cast to avoid warnings when calling
	ScmMakeClStrength on clsWeak,clsMedium,clsStrong,clsRequired objects

Sat Jan 23 15:30:16 1999  Greg Badros  <gjb@cs.washington.edu>

	* c++/ClSimplexSolver.cc: Added some comments, some explanations
	when exceptions are thrown, and some minor cleanups, bug-fixes

	* c++/ClTests.cc: Added inconsistent3() test, and run it.

	* c++/ClStrength.h: Added _pv memvar, and setPv(), Pv() -- needed
	for tracking ClStrengths in guile

	* guile/cassowary_scm.cc: Replace all iarg uses with the literal
	number.  Point ClStrength objects at their scheme-level object
	using their new _pv field.  Protect ClStrength objects properly.

Sat Sep 19 17:08:21 1998  Greg Badros  <gjb@cs.washington.edu>

	* c++/Makefile (CPPFLAGS): Added USE_GC, commented out, and added
	OTHER_LIBS variable for linking with the gc library

Sat Sep 19 17:01:16 1998  Greg Badros  <gjb@cs.washington.edu>

	* c++/ClTableau.h: Added AssertValid() for testing integrity of
	Tableau

	* c++/ClSymbolicWeight.h, c++/ClStrength.h, c++/ClSlackVariable.h,
	c++/ClLinearExpression.h, c++/ClErrors.h, c++/ClDummyVariable.h,
	c++/ClConstraint.h, c++/ClAbstractVariable.h:  Descend objects
	from "gc" class conditioned on USE_GC* pp macros

	* c++/Cassowary.h: Conditionally include gc_cpp.h ifdef USE_GC;
	added NEWVAR and DELVAR macros for outputting debug information at 
	new/delete sites

	* c++/ClSimplexSolver.h: Call AssertValid before solving

	* c++/ClSimplexSolver.cc: Remove memory leak of the artificial
	objective variable

	* c++/ClLinearExpression.h: Fix gdb_print to have a newline

	* c++/ClLeakTest: Added leakTest2 which more obviously leaks, and
	use GC_gcollect() to force a collect

Tue Sep 15 16:36:20 1998  Greg Badros  <gjb@cs.washington.edu>

	* c++/ClTableau.h, ClTableau.cc: Handle removing vars from _columns more
	carefully, and add gdb_print(), virtual destructor

	* c++/ClLinearExpression.h, c++/ClConstraint.h,
 	c++/ClAbstractVariable.h: Added gdb_print()

Wed Sep  9 09:46:35 1998  Greg Badros  <gjb@cs.washington.edu>

	* c++/ClLinearExpression.h, c++/ClLinearExpression.cc: added uses
	of 'typename' keyword as needed by egcs-1.1b's -pedantic (and the
	C++ FDIS)

Sun Sep  6 13:19:01 1998  Greg Badros  <gjb@cs.washington.edu>

	* c++/ClSimplexSolver.h: Added _pv field, and Pv() setPv() getter
	and setter
	
	* guile/cassowary_scm.cc: Use solver's _pv field to point
	ClSimplexSolver back at the scheme object that wraps it

Fri Sep  4 18:52:50 1998  Greg Badros  <gjb@cs.washington.edu>

	* guile/cassowary_scm.hpp, guile/cassowary_scm.cc: Added PvFromScm 
	and ScmFromPv to hide the reinterpret casts used to store a scheme 
	object as the void * Pv() attached to a cassowary object.  Attach
	the scheme-level cl-variable to a ClVariable object.  Added
	`clv-attach!' and `clv-attached-object' to manipulate the attached 
	object (often better to use scheme level properties, though)

Fri Sep  4 18:51:30 1998  Greg Badros  <gjb@cs.washington.edu>

	* guile/Makefile: Use "perl" from path to run extract docs instead 
	of relying on #! line, and generate the -procedures.txt file as
	well as the .sgml file

Wed Sep  2 17:08:14 1998  Greg Badros  <gjb@cs.washington.edu>

	* guile/cassowary_scm.cc, guile/cassowary_scm.hpp: Added
	ClStayConstraint wrapper.  Make cl-add-stay, cl-add-editvar take a 
	list of variables instead of a varargs last argument and instead
	add two optional arguments STRENGTH and FACTOR (thus those
	primitives remain backward compatible as long as only one variable 
	was given).

Wed Sep  2 13:55:37 1998  Greg Badros  <gjb@cs.washington.edu>

	* ClSimplexSolver.h: Added weight option to addEditVar and use it

	* ClLinearExpression.h: Added PconstClAbstractVariable, use it;
	use ClVarToCoeffMap in coefficientFor.

Thu Aug  6 20:56:45 1998  Greg Badros  <gjb@cs.washington.edu>

	* Release v0.2.

Thu Aug  6 20:41:40 1998  Greg Badros  <gjb@cs.washington.edu>

	* ClTests.cc: Added multiedit() test for testing nested
	  beginEdit-s

	* ClSimplexSolver.h, ClSimplexSolver.cc: Support nested
	  beginEdit-s -- use removeEditVarsTo(n), and rewrite
	  removeAllEditVars in terms of the former;  Use FIsSatisfied on
	  constraint and compare with testing internally for
	  FIsConstraintSatisfied() -- untested.

	* ClLinearInequality.h, ClLinearEquation.h, ClConstraint.h: Added
	  virtual FIsSatisfied

	* ClLinearExpression.h, ClLinearExpression.cc: Added evaluate()

	* ClAbstractVariable.h: Return 0 for value(), and make it a
	  virtual function.

Wed Aug  5 16:10:56 1998  Greg Badros  <gjb@cs.washington.edu>

	* ClStrength.h: Have ClStrength::symbolicWeight return a const
	  ref, instead of by value, make clsXXX const refs.

	* ClSimplexSolver.cc, ClLinearInequality.cc, ClLinearEquation.cc,
	  ClLinearConstraint.cc: Take ClStrengths by const refs

Tue Aug  4 15:22:08 1998  Greg Badros  <gjb@cs.washington.edu>

	* guile/cassowary_scm.cc, cassowary_scm.hpp: Move all inline
	  functions into .hpp file.  Added cl-is-constraint-satisfied?
	
	* ClTableau.h: Added a rowExpression() const memfn, for
	  FIsConstraintSatisfied()

	* ClSimplexSolver.h, ClSimplexSolver.cc: Added (probably broken)
	  FIsConstraintSatisfied(cn) memfn -- needs testing

Sun Aug  2 16:49:34 1998  Greg Badros  <gjb@cs.washington.edu>

	* ClSimplexSolver.h: Added ConstraintMap() accessor to
	_markerVars, for cl-constraint-list guile primitive

	* ClConstraint.h: Added setPv(), Pv(), and _pv field to a
	constraint, for attaching extra information.

Thu Jul 30 19:15:40 1998  Greg Badros  <gjb@cs.washington.edu>

	* ClTests.cc: Added simple2, to test new EditMisuse exception on
	editing a variable that is nowhere in the solver.

	* ClTableau.h, ClTableau.cc:  Be more careful about inserting into
	_externalParametricVars; add FIsBasicVar to assist that care.

	* ClSimplexSolver.cc, ClSimplexSolver.h: Added pfnCnSatCallback -- 
	does nothing for now;  throw an ExCLEditMisuse exception if an
	edit constraint is added on a variable that is not in the tableau
	(needs at least a stay constraint in the solver); replace some
	calls to rowExpression with FIsBasicVar when the latter is the
	intent.

Thu Jul 21  Greg Badros  <gjb@cs.washington.edu>

	* ClVariable.h, ClVariable.cc: Added _pv field, settor and gettor.

	
ABOVE CHANGES ONLY IN C++ IMPLEMENTATION AND ITS WRAPPERS
	
Fri Jul 17 19:24:54 1998  Greg Badros  <gjb@cs.washington.edu>

	* ClVariable.h, .java: Added change_value memfn, and make it virtual
 	instead of setValue -- thus subclasses can specialize behaviour
 	when the variable gets set by the solver.

	* ClSimplexSolver.h, .java: Use change_value for setEditedValue if
	the variable is not in the tableau;  call resolve() before
	removeAllEditVars in endEdit

	* ClSimplexSolver.cc, .java (setExternalVariables): Use change_value
	instead of set_value when so subclasses can override and notice a
	changed variable

Thu Jul 16 19:49:45 1998  Greg Badros  <gjb@cs.washington.edu>

	* Added setEditedValue(), FContainsVariable(), and addVar() to c++ 
	and Java implementations

	* Fixed bug in C++ and Java in solvers lacking stay constraints
 	that was due to not-updating the external parametric variables
 	set.

Fri Jul 10 09:00:15 1998  Greg Badros  <gjb@cs.washington.edu>

	* Fixed bug whereby a dummy variable was being pivoted into the
	basis because pexpr->anyVariable() didn't guarantee the variable
	it returned was a pivotable variable -- now it's called
	anyPivotableVariable(), and does the right thing.

	* Fixed bug whereby column mappings that had no rows remained in
	the list of columns -- now erase the column key when its value is
	the empty set

	* Fixed bug whereby constraints that threw required failure
	exceptions remained in the tableau (a removeConstraint on a
	constraint that failed to be added used to succeed, now it does
	not)

Monday Jun 29 16:50:00 1998  Greg Badros  <gjb@cs.washington.edu>

	* Cassowary v0.1 is released  --- see local/POST-ANNOUNCE-TO for
	list of places where it was announced

